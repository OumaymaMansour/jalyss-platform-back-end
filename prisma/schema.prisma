generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  media    Media?  @relation(fields: [mediaId], references: [id])
  mediaId  String?
  userName String
}

model Employee {
  id          Int         @id @default(autoincrement())
  firstName   String
  lastName    String
  email       String
  phoneNumber String
  address     String
  position    String
  media       Media?      @relation(fields: [mediaId], references: [id])
  mediaId     String?
  inventory   Inventory[]
}

model Client {
  id                   Int                    @id @default(autoincrement())
  fullName             String
  phoneNumber          String
  address              String
  email                String
  registrationDate     DateTime?
  idCategoryClient     Int
  categoryClient       CategoryClient?        @relation(fields: [idCategoryClient], references: [id])
  purchaseOrder        PurchaseOrder[] // bon de commande 
  salesInvoice         SalesInvoice[] //vente facture
  returnNote           ReturnNote[] // bon de retour ... zaama ya khalil nhotouha return voucher
  estimate             Estimate[] // devis
  salesDeliveryInvoice SalesDeliveryInvoice[] //vente bon de livraison facture
  salesDeliveryNote    SalesDeliveryNote[] // vente bon de livraison
  media                Media?                 @relation(fields: [mediaId], references: [id])
  mediaId              String?
}

model CategoryClient {
  id     Int      @id @default(autoincrement())
  name   String
  client Client[]
}

// Article models 
model Article {
  id    Int    @id @default(autoincrement())
  title String
  code  String @unique

  cover              Media?   @relation(fields: [coverId], references: [id])
  pageNumber         Int?
  weight             Float?
  coverId            String?
  shortDescriptionEn String?
  longDescriptionEn  String?
  shortDescriptionAr String?
  longDescriptionAr  String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt

  purchaseOrderLine           PurchaseOrderLine[] // bon de commande line 
  ReturnNoteLine              ReturnNoteLine[] // bon de retour line 
  receiptNoteLine             ReceiptNoteLine[] // bon de reception line 
  purchaseDeliveryNoteLine    PurchaseDeliveryNoteLine[] // achat bon de livraison line
  purchaseDeliveryInvoiceLine PurchaseDeliveryInvoiceLine[] // achat bon de livraison facture line 
  purchaseInvoiceLine         PurchaseInvoiceLine[] // achat facture line
  estimateLine                EstimateLine[] // devis line

  salesInvoiceLine         SalesInvoiceLine[] // vente facture line
  salesDeliveryNoteLine    SalesDeliveryNoteLine[] // vente bon de livraison line
  salesDeliveryInvoiceLine SalesDeliveryInvoiceLine[] // vente bon de livraison facture
  transferNoteLine         TransferNoteLine[] // bon de transfere line 
  exitNoteLine             ExitNoteLine[] // bon de sortie line

  articleByAuthor ArticleByAuthor[]

  articleByCategory        ArticleByCategory[]
  articleByPublishingHouse ArticleByPublishingHouse[]
  priceByChannel           PriceByChannel[] // Relation avec le modèle PriceByChannel
  stockArticle             StockArticle[] // Relation avec le modèle

  inventoryLine InventoryLine[] // relation 1 to many between Invontory Line and Article
}

model PublishingHouse {
  id                       Int                        @id @default(autoincrement())
  nameAr                   String
  nameEn                   String?
  address                  String?
  logoId                   String?
  logo                     Media?                     @relation(fields: [logoId], references: [id])
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime?                  @updatedAt
  articleByPublishingHouse ArticleByPublishingHouse[]
}

model ArticleByPublishingHouse {
  publishingHouse   PublishingHouse @relation(fields: [publishingHouseId], references: [id])
  publishingHouseId Int
  article           Article         @relation(fields: [articleId], references: [id])
  articleId         Int

  @@unique([articleId, publishingHouseId])
}

model Author {
  id              String            @id @default(uuid())
  nameAr          String
  nameEn          String?
  biographyAr     String?
  biographyEn     String?
  mediaId         String?
  ArticleByAuthor ArticleByAuthor[]
  Media           Media?            @relation(fields: [mediaId], references: [id])
}

model ArticleByAuthor {
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int
  author    Author  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String

  @@unique([authorId, articleId])
}

model CategoryArticle {
  id                Int                 @id @default(autoincrement())
  name              String
  articleByCategory ArticleByCategory[]
}

model ArticleByCategory {
  categoryArticle   CategoryArticle @relation(fields: [categoryarticleId], references: [id])
  categoryarticleId Int
  article           Article         @relation(fields: [articleId], references: [id])
  articleId         Int

  @@unique([articleId, categoryarticleId])
}

//canaux de vente
model SalesChannels {
  id      Int    @id @default(autoincrement())
  name    String
  type    String
  region  String
  idStock Int

  stock                Stock                  @relation(fields: [idStock], references: [id])
  purchaseOrder        PurchaseOrder[] // bon de commande
  salesInvoice         SalesInvoice[] // vente facture 
  salesDeliveryInvoice SalesDeliveryInvoice[] //vente bon de livraison facture
  salesDeliveryNote    SalesDeliveryNote[] // vente bon de livraison 
  priceByChannel       PriceByChannel[] // Relation avec le modèle PriceByChannel (lahne el relation m3a les articles)
}

model PriceByChannel {
  id             Int   @id @default(autoincrement())
  price          Float
  idArticle      Int
  idSalesChannel Int

  article      Article       @relation(fields: [idArticle], references: [id])
  salesChannel SalesChannels @relation(fields: [idSalesChannel], references: [id])

  @@unique([idArticle, idSalesChannel])
}

//bon de reception
model ReceiptNote {
  id                      Int                       @id @default(autoincrement())
  receiptDate             DateTime
  numReceiptNote          Int
  typeReceipt             TypeReceipt               @default(achat) // Enum with values "retour" or "achat" or "transfer"
  totalAmount             Float?
  discount                Float?
  tax                     Float?
  payedAmount             Float?
  restedAmount            Float?
  paymentType             PaymentType?
  paymentStatus           PaymentStatus?
  idProvider              Int? //fournisseur
  idStock                 Int
  provider                Provider?                 @relation(fields: [idProvider], references: [id])
  stock                   Stock?                    @relation(fields: [idStock], references: [id])
  purchaseDeliveryNote    PurchaseDeliveryNote[] // achat bon de livraison
  transferNote            TransferNote[] // bon de transfere
  purchaseDeliveryInvoice PurchaseDeliveryInvoice[] // achat bon de livraison facture
  purchaseInvoice         PurchaseInvoice[] // achat facture
  receiptNoteLine         ReceiptNoteLine[] // bon de reception line
  returnNote              ReturnNote[] //
}

model ReceiptNoteLine {
  id            Int          @id @default(autoincrement())
  idReceiptNote Int
  idArticle     Int
  quantity      Int
  price         Float?
  discount      Float?
  receiptNote   ReceiptNote? @relation(fields: [idReceiptNote], references: [id])
  Article       Article?     @relation(fields: [idArticle], references: [id])
}

//achat bon de livraison
model PurchaseDeliveryNote {
  id                       Int                        @id @default(autoincrement())
  idReceiptNote            Int
  totalAmount              Float?
  discount                 Float?
  tax                      Float?
  payedAmount              Float?
  restedAmount             Float?
  paymentType              PaymentType?
  paymentStatus            PaymentStatus?
  deliveryDate             DateTime
  receiptNote              ReceiptNote?               @relation(fields: [idReceiptNote], references: [id])
  purchaseDeliveryNoteLine PurchaseDeliveryNoteLine[]
}

//achat bon de livraison line
model PurchaseDeliveryNoteLine {
  id                   Int                   @id @default(autoincrement())
  idDeliveryNote       Int
  idArticle            Int
  quantity             Int
  price                Float?
  discount             Float?
  purchaseDeliveryNote PurchaseDeliveryNote? @relation(fields: [idDeliveryNote], references: [id])
  article              Article?              @relation(fields: [idArticle], references: [id])
}

// achat bon de livraison facture
model PurchaseDeliveryInvoice {
  id                          Int                           @id @default(autoincrement())
  idReceiptNote               Int
  totalAmount                 Float?
  discount                    Float?
  tax                         Float?
  payedAmount                 Float?
  restedAmount                Float?
  paymentType                 PaymentType?
  paymentStatus               PaymentStatus?
  deliveryDate                DateTime
  receiptNote                 ReceiptNote?                  @relation(fields: [idReceiptNote], references: [id])
  purchaseDeliveryInvoiceLine PurchaseDeliveryInvoiceLine[]
}

model PurchaseDeliveryInvoiceLine {
  id                      Int                      @id @default(autoincrement())
  idDeliveryInvoice       Int
  idArticle               Int
  quantity                Int
  price                   Float?
  discount                Float?
  purchaseDeliveryInvoice PurchaseDeliveryInvoice? @relation(fields: [idDeliveryInvoice], references: [id])
  article                 Article?                 @relation(fields: [idArticle], references: [id])
}

//achat facture
model PurchaseInvoice {
  id                  Int                   @id @default(autoincrement())
  deliveryDate        DateTime
  totalAmount         Float?
  discount            Float?
  tax                 Float?
  payedAmount         Float?
  restedAmount        Float?
  paymentType         PaymentType?
  paymentStatus       PaymentStatus?
  idReceiptNote       Int
  ReceiptNote         ReceiptNote           @relation(fields: [idReceiptNote], references: [id])
  PurchaseInvoiceLine PurchaseInvoiceLine[]
}

model PurchaseInvoiceLine {
  id                Int              @id @default(autoincrement())
  idPurchaseInvoice Int
  idArticle         Int
  quantity          Int
  price             Float?
  discount          Float?
  purchaseInvoice   PurchaseInvoice? @relation(fields: [idPurchaseInvoice], references: [id])
  Article           Article?         @relation(fields: [idArticle], references: [id])
}

//vente facture
model SalesInvoice {
  id               Int                @id @default(autoincrement())
  date             DateTime
  idClient         Int
  totalAmount      Float?
  discount         Float?
  tax              Float?
  payedAmount      Float?
  restedAmount     Float?
  paymentType      PaymentType?
  paymentStatus    PaymentStatus?
  status           Boolean            @default(false)
  client           Client             @relation(fields: [idClient], references: [id])
  idPurchaseOrder  Int?
  purchaseOrder    PurchaseOrder?     @relation(fields: [idPurchaseOrder], references: [id])
  saleChannelId    Int
  salesChannels    SalesChannels      @relation(fields: [saleChannelId], references: [id])
  exitNoteId       Int
  exitNote         ExitNote           @relation(fields: [exitNoteId], references: [id])
  salesInvoiceLine SalesInvoiceLine[]
}

model SalesInvoiceLine {
  id             Int           @id @default(autoincrement())
  article        Article?      @relation(fields: [articleId], references: [id])
  articleId      Int
  salesInvoice   SalesInvoice? @relation(fields: [salesInvoiceId], references: [id])
  salesInvoiceId Int
  quantity       Int
  price          Float?
  discount       Float?
}

//vente bon de livraison 
model SalesDeliveryNote {
  id              Int            @id @default(autoincrement())
  idClient        Int
  exitNoteId      Int
  deliveryDate    DateTime
  saleChannelId   Int
  idPurchaseOrder Int?
  totalAmount     Float?
  discount        Float?
  tax             Float?
  payedAmount     Float?
  restedAmount    Float?
  paymentType     PaymentType?
  paymentStatus   PaymentStatus?
  status          Boolean        @default(false)

  client                Client                  @relation(fields: [idClient], references: [id])
  exitNote              ExitNote                @relation(fields: [exitNoteId], references: [id])
  salesChannels         SalesChannels           @relation(fields: [saleChannelId], references: [id])
  purchaseOrder         PurchaseOrder?          @relation(fields: [idPurchaseOrder], references: [id])
  salesDeliveryNoteLine SalesDeliveryNoteLine[]
}

model SalesDeliveryNoteLine {
  id Int @id @default(autoincrement())

  salesDeliveryNote   SalesDeliveryNote? @relation(fields: [salesDeliveryNoteId], references: [id])
  salesDeliveryNoteId Int

  article   Article? @relation(fields: [articleId], references: [id])
  articleId Int

  quantity Int
  price    Float?
  discount Float?
}

//vente bon de livraison facture
model SalesDeliveryInvoice {
  id              Int            @id @default(autoincrement())
  clientId        Int
  exitNoteId      Int
  deliveryDate    DateTime
  purchaseOrderId Int? //bon de commande 
  salesChannelsId Int
  totalAmount     Float?
  discount        Float?
  tax             Float?
  payedAmount     Float?
  restedAmount    Float?
  paymentType     PaymentType?
  paymentStatus   PaymentStatus?
  status          Boolean        @default(false)

  client                   Client                     @relation(fields: [clientId], references: [id])
  exitNote                 ExitNote?                  @relation(fields: [exitNoteId], references: [id])
  purchaseOrder            PurchaseOrder?             @relation(fields: [purchaseOrderId], references: [id])
  salesChannels            SalesChannels?             @relation(fields: [salesChannelsId], references: [id])
  salesDeliveryInvoiceLine SalesDeliveryInvoiceLine[]
}

//vente bon de livraison facture line
model SalesDeliveryInvoiceLine {
  id Int @id @default(autoincrement())

  salesDeliveryInvoice   SalesDeliveryInvoice? @relation(fields: [salesDeliveryInvoiceId], references: [id])
  salesDeliveryInvoiceId Int
  article                Article?              @relation(fields: [articleId], references: [id])
  articleId              Int

  quantity Int
  price    Float?
  discount Float?
}

//bon de commande 
model PurchaseOrder {
  id              Int               @id @default(autoincrement())
  idClient        Int
  salesChannelsId Int
  orderDate       DateTime
  date            DateTime
  totalAmount     Float?
  discount        Float?
  tax             Float?
  status          TypePurchaseOrder @default(Pending) //enum with values "Confirmed" & "Pending" & "Cancelled"

  client               Client?                @relation(fields: [idClient], references: [id])
  salesChannels        SalesChannels?         @relation(fields: [salesChannelsId], references: [id])
  salesInvoice         SalesInvoice[]
  salesDeliveryInvoice SalesDeliveryInvoice[]
  purchaseOrderLine    PurchaseOrderLine[]
  salesDeliveryNote    SalesDeliveryNote[]
}

model PurchaseOrderLine {
  id              Int            @id @default(autoincrement())
  idArticle       Int
  idPurchaseOrder Int
  article         Article?       @relation(fields: [idArticle], references: [id])
  purchaseOrder   PurchaseOrder? @relation(fields: [idPurchaseOrder], references: [id])

  quantity Int
  price    Float?
  discount Float?
}

//bon de retour 
model ReturnNote {
  id             Int              @id @default(autoincrement())
  idClient       Int
  receiptNoteId  Int
  returnDate     DateTime
  client         Client?          @relation(fields: [idClient], references: [id])
  receiptNote    ReceiptNote      @relation(fields: [receiptNoteId], references: [id])
  returnNoteLine ReturnNoteLine[]
}

model ReturnNoteLine {
  id           Int         @id @default(autoincrement())
  idArticle    Int
  idReturnNote Int
  article      Article?    @relation(fields: [idArticle], references: [id])
  returnNote   ReturnNote? @relation(fields: [idReturnNote], references: [id])

  quantity Int
  price    Float?
  discount Float?
}

// devis  :  es2lou khalil 
model Estimate {
  id           Int            @id @default(autoincrement())
  idClient     Int
  totalAmount  Float?
  discount     Float?
  tax          Float?
  creationDate DateTime
  // date          DateTime
  client       Client?        @relation(fields: [idClient], references: [id])
  EstimateLine EstimateLine[]
}

model EstimateLine {
  id         Int       @id @default(autoincrement())
  idEstimate Int
  idArticle  Int
  Estimate   Estimate? @relation(fields: [idEstimate], references: [id])
  Article    Article?  @relation(fields: [idArticle], references: [id])
}

//bon de transfer 
model TransferNote {
  id               Int                @id @default(autoincrement())
  from             Int
  to               Int
  date             DateTime
  idReceiptNote    Int
  idExitNote       Int
  stockFrom        Stock?             @relation(name: "StockFrom", fields: [from], references: [id])
  stockTo          Stock?             @relation(name: "StockTo", fields: [to], references: [id])
  receiptNote      ReceiptNote?       @relation(fields: [idReceiptNote], references: [id])
  exitNote         ExitNote?          @relation(fields: [idExitNote], references: [id])
  transferNoteLine TransferNoteLine[]
}

model TransferNoteLine {
  id             Int           @id @default(autoincrement())
  idArticle      Int
  transferNoteId Int
  article        Article?      @relation(fields: [idArticle], references: [id])
  transferNote   TransferNote? @relation(fields: [transferNoteId], references: [id])

  quantity Int
}

model Stock {
  id       Int    @id @default(autoincrement())
  name     String
  location String
  capacity Int

  transferNoteFrom TransferNote[]  @relation("StockFrom")
  transferNoteTo   TransferNote[]  @relation("StockTo")
  salesChannels    SalesChannels[]
  receiptNote      ReceiptNote[]
  exitNote         ExitNote[]
  stockArticle     StockArticle[]
  inventory        Inventory[]
}

// bon de sortie
model ExitNote {
  id Int @id @default(autoincrement())

  numExitNote   Int
  exitDate      DateTime
  stockId       Int
  totalAmount   Float?
  discount      Float?
  tax           Float?
  payedAmount   Float?
  restedAmount  Float?
  paymentType   PaymentType?
  paymentStatus PaymentStatus?

  stock                Stock                  @relation(fields: [stockId], references: [id])
  transferNote         TransferNote[]
  salesInvoice         SalesInvoice[]
  salesDeliveryInvoice SalesDeliveryInvoice[]
  exitNoteLine         ExitNoteLine[]
  salesDeliveryNote    SalesDeliveryNote[]
}

model ExitNoteLine {
  id Int @id @default(autoincrement())

  exitNote   ExitNote? @relation(fields: [exitNoteId], references: [id])
  exitNoteId Int?
  Article    Article?  @relation(fields: [articleId], references: [id])
  articleId  Int?

  quantity Int
  price    Float?
  discount Float?
}

model Provider {
  id                 Int           @id @default(autoincrement())
  nameProvider       String
  phoneNumber        String
  email              String
  adresse            String
  registrationNumber String
  receiptNote        ReceiptNote[]
}

enum TypeReceipt {
  achat
  retour
  transfer
}

enum TypePurchaseOrder {
  Confirmed
  Pending
  Cancelled
}

//media
model Media {
  id              String            @id @default(uuid())
  path            String
  type            String
  alt             String?
  extension       String?
  description     String?
  user            User[]
  article         Article[]
  employee        Employee[]
  publishingHouse PublishingHouse[]
  client          Client[]
  author          Author[]
}

model StockArticle {
  id        Int     @id @default(autoincrement())
  stock     Stock   @relation(fields: [stockId], references: [id])
  stockId   Int
  article   Article @relation(fields: [articleId], references: [id])
  articleId Int
  quantity  Int     @default(0)

  @@unique([stockId, articleId]) // pour éviter les doublons
}

enum StatusInventory {
  draft
  confirmed
}

model Inventory {
  id            String          @id @default(uuid())
  name          String
  date          DateTime
  createurId    Int?
  stockId       Int?
  status        StatusInventory
  createur      Employee?       @relation(fields: [createurId], references: [id])
  stock         Stock?          @relation(fields: [stockId], references: [id])
  inventoryLine InventoryLine[]
}

model InventoryLine {
  id          Int       @id @default(autoincrement())
  articleId   Int
  quantity    Int
  reelQuantity Int
  article     Article   @relation(fields: [articleId], references: [id])
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
}

enum PaymentType {
  Cash
  Checks
  CreditCard
  BankTransfers
}

enum PaymentStatus {
  Payed
  NotPayed
  PartiallyPayed
}
